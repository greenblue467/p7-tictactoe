{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","board","currentPlayer","winner","annouce","num","add","e","newBoard","setState","win","line","index","length","a","b","c","frozeBoard","restart","up","display","this","className","style","map","x","key","Math","random","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAgHeA,G,iNA5GbC,MAAQ,CACNC,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACxCC,cAAe,EACfC,OAAQ,sBACRC,SAAS,EACTC,IAAK,G,EAEPC,IAAM,SAAAC,GACJ,IAAMC,EAAQ,YAAO,EAAKR,MAAMC,OACZ,KAAhBO,EAASD,KACsB,IAA7B,EAAKP,MAAME,eACbM,EAASD,GAAK,IACd,EAAKE,SAAS,CACZP,cAAe,EACfD,MAAOO,EACPL,OAAQ,WACRE,IAAK,EAAKL,MAAMK,IAAM,KAEc,IAA7B,EAAKL,MAAME,gBACpBM,EAASD,GAAK,IACd,EAAKE,SAAS,CACZP,cAAe,EACfD,MAAOO,EACPL,OAAQ,WACRE,IAAK,EAAKL,MAAMK,IAAM,KAG1B,EAAKK,IAAI,EAAKV,MAAMG,SAEC,IAAnB,EAAKH,MAAMK,KACb,EAAKI,SAAS,CAAEN,OAAQ,sBAAuBC,SAAS,EAAMC,IAAK,K,EAQvEK,IAAM,SAAAH,GAWJ,IAVA,IAAMI,EAAO,CACX,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAQ,EAAGA,EAAQD,EAAKE,OAAQD,IAAS,CAChD,IAAME,EAAIH,EAAKC,GAAO,GAChBG,EAAIJ,EAAKC,GAAO,GAChBI,EAAIL,EAAKC,GAAO,GACtB,GAA4B,KAAxB,EAAKZ,MAAMC,MAAMa,IAEjB,EAAKd,MAAMC,MAAMa,KAAO,EAAKd,MAAMC,MAAMc,IACzC,EAAKf,MAAMC,MAAMa,KAAO,EAAKd,MAAMC,MAAMe,GACzC,CACA,IAAMC,EAAU,YAAO,EAAKjB,MAAMC,OAClC,EAAKQ,SAAS,CACZR,MAAOgB,EACPb,SAAS,EACTD,OAAQI,EACRF,IAAK,O,EAMfa,QAAU,WAER,EAAKT,SAAS,CACZP,cAAe,EACfD,MAHe,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAIhDG,SAAS,EACTD,OAAQ,sBACRE,IAAK,K,wEAGC,IAAD,OACDc,EAAK,CACTC,QAASC,KAAKrB,MAAMI,SAAW,SAEjC,OACE,yBAAKkB,UAAU,QACb,wDACA,yBAAKA,UAAU,QACb,2CACA,2CACA,uBAAGA,UAAU,UAAUC,MAAOJ,GAA9B,iBACiBE,KAAKrB,MAAMG,OAD5B,OAIF,yBAAKmB,UAAU,OACZD,KAAKrB,MAAMC,MAAMuB,KAAI,SAACC,EAAGb,GAAJ,OACpB,yBAAKc,IAAKC,KAAKC,SAAUC,QAAS,kBAAM,EAAKvB,IAAIM,KAC9Ca,OAIP,yBAAKH,UAAU,MAAMO,QAASR,KAAKH,SAAnC,iC,GArGUY,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.75048287.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport app from \"./styles/app.css\";\n\nclass App extends Component {\n  state = {\n    board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    currentPlayer: 1,\n    winner: \"No one ! It's A Tie\",\n    annouce: false,\n    num: 0\n  };\n  add = e => {\n    const newBoard = [...this.state.board];\n    if (newBoard[e] === \"\") {\n      if (this.state.currentPlayer === 1) {\n        newBoard[e] = \"o\";\n        this.setState({\n          currentPlayer: 2,\n          board: newBoard,\n          winner: \"Player 1\",\n          num: this.state.num + 1\n        });\n      } else if (this.state.currentPlayer === 2) {\n        newBoard[e] = \"x\";\n        this.setState({\n          currentPlayer: 1,\n          board: newBoard,\n          winner: \"Player 2\",\n          num: this.state.num + 1\n        });\n      }\n      this.win(this.state.winner);\n    }\n    if (this.state.num === 8) {\n      this.setState({ winner: \"No one ! It's A Tie\", annouce: true, num: 8 });\n    }\n    /* if (this.state.num < 8) {\n      this.win(this.state.winner);\n    } else {\n      this.setState({ winner: \"No one ! It's A Tie\", annouce: true, num: 8 });\n    }*/\n  };\n  win = e => {\n    const line = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let index = 0; index < line.length; index++) {\n      const a = line[index][0];\n      const b = line[index][1];\n      const c = line[index][2];\n      if (this.state.board[a] !== \"\") {\n        if (\n          this.state.board[a] === this.state.board[b] &&\n          this.state.board[a] === this.state.board[c]\n        ) {\n          const frozeBoard = [...this.state.board];\n          this.setState({\n            board: frozeBoard,\n            annouce: true,\n            winner: e,\n            num: 0\n          });\n        }\n      }\n    }\n  };\n  restart = () => {\n    const newBoard = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n    this.setState({\n      currentPlayer: 1,\n      board: newBoard,\n      annouce: false,\n      winner: \"No one ! It's A Tie\",\n      num: 0\n    });\n  };\n  render() {\n    const up = {\n      display: this.state.annouce && \"block\"\n    };\n    return (\n      <div className=\"game\">\n        <h2>井字遊戲</h2>\n        <div className=\"text\">\n          <p>Player 1 : o</p>\n          <p>Player 2 : x</p>\n          <p className=\"annouce\" style={up}>\n            The Winner Is {this.state.winner} !\n          </p>\n        </div>\n        <div className=\"box\">\n          {this.state.board.map((x, index) => (\n            <div key={Math.random()} onClick={() => this.add(index)}>\n              {x}\n            </div>\n          ))}\n        </div>\n        <div className=\"btn\" onClick={this.restart}>\n          重新開始\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}